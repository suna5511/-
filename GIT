链接：https://www.liaoxuefeng.com/wiki/896043488029600/896067008724000
安装网址：https://git-scm.com/downloads
一. 创建版本库
 $ mkdir learngit 创建目录
 $ cd learngit
 $ git init 初始化仓库
 $ git add readme.txt 添加文件
 $ git commit -m "注释"  提交文件
二. 版本回退
1. $ git log  查看历史
2. $ git log --pretty=oneline  精简消息
3. $ git reset --hard HEAD^  (上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100)
4. $ git reset --hard 1094a 指定回到之前的某个版本
5. $ git reflog  记录你的每一次命令
三. 工作区/暂存区/版本库/
1.工作区：就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区：
2.版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
3.暂存区：需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改（git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。）
4. $ git status 查看暂存区
四.管理修改
1. $ git diff HEAD -- readme.txt 查看工作区和版本库里面最新版本的区别
2. $ git checkout -- readme.txt 丢弃工作区的修改
3. $ git reset HEAD readme.txt 可以把暂存区的修改撤销掉，重新放回工作区
4. $ git rm test.txt 删除工具库文件  $ git commit -m "remove test.txt" 把版本库的文件删除
五.远程仓库
1. $ git remote add origin git@github.com:michaelliao/learngit.git 先在github上创建仓库，然后将一个已有的本地仓库与之关联
2. $ git push -u origin master  把本地库的所有内容推送到远程库上（加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令）
3. $ git clone git@github.com:michaelliao/gitskills.git  克隆一个本地库，GitHub给出的地址不止一个，还可以用https://github.com/michaelliao/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议
六.分支管理
1. $ git checkout -b dev / $ git switch -c dev  创建dev分支，然后切换到dev分支，相当于 $ git branch dev 和 $ git checkout dev
2. $ git branch  查看当前分支
3. $ git add readme.txt  $ git commit -m "branch test" 提交
4. $ git checkout master 切换回master分支
5. $ git merge dev 把dev分支的工作成果合并到master分支上
6. $ git branch -d dev 删除dev分支
7. 当发生冲突时，$ git merge feature1报错，使用$ git status查看冲突文件，修改后保存，然后再提交
   $ git add readme.txt 
   $ git commit -m "conflict fixed"
8. 查看分支合并情况
   $ git log --graph --pretty=oneline --abbrev-commit
9. $ git merge --no-ff -m "注释" dev  表示禁用Fast forward
10. 分支策略 
   首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
   那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
   你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
11. bug分支
   $ git stash 把当前工作现场“储藏”起来，等以后恢复现场后继续工作
   $ git stash list  查看之前存的工作现场
   $ git stash pop  恢复的同时把stash内容也删了， git stash apply恢复，但是恢复后，stash内容并不删除
   $ git cherry-pick 4c805e2 复制一个特定的提交到当前分支。Git自动给dev分支做了一次提交，注意这次提交的commit是1d4b803，它并不同于master的4c805e2，因为这两个commit只是改动相同，但确实是两个不同的commit。用git cherry-pick，我们就不需要在dev分支上手动再把修bug的过程重复一遍
   $ git branch -D feature-vulcan  这个时feature-vulcan分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的-D参数。
七.多人协作
   $ git remote  查看远程库的信息
   $ git remote -v  显示更详细的信息
   $ git push origin master  推送分支
   $ git checkout -b dev origin/dev  当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支，现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支
   $ git pull
   $ git branch --set-upstream-to=origin/dev dev  在pull之前指定本地dev分支与远程origin/dev分支的链接
八. 标签
   $ git tag v1.0  打标签，默认标签是打在最新提交的commit上的
   $ git tag  查看所有标签
   $ git log --pretty=oneline --abbrev-commit  找到历史提交的commit id
   $ git tag v0.9 f52c633 ，然后打上
   $ git show v0.9  查看标签信息
   $ git tag -a v0.1 -m "version 0.1 released" 1094adb  用-a指定标签名，-m指定说明文字
   $ git tag -d v0.1 删除标签
   $ git push origin v1.0  推送某个标签到远程
   $ git push origin --tags  一次性推送全部尚未推送到远程的本地标签
   $ git tag -d v0.9  然后  $ git push origin :refs/tags/v0.9  如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除，然后，从远程删除。删除命令也是push
   
   
   

   










 
 
 
